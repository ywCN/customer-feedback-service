const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

// User is the model class
const User = mongoose.model('users');

passport.serializeUser((user, done) => {
    // user is a mongo Model instance
    // user.id is used for follow-up requests.
    // This id is not the profile.id(googleId).
    // This is automatically generated by mongoDB.
    // This id can also be used by auth services like Google, Facebook, LinkedIn
    // With this id, we can assume every user could have an id
    // generated by mongo, so we can enable many auth services.
    done(null, user.id);
});

// turn id into a user Model
passport.deserializeUser((id, done) => {
    // use the method in User class
    // this is an async operation
    User.findById(id).then(user => {
        done(null, user);
    });
});

// clientID is a public token that can be shared.
// clientSecret should not be shared.
// let passport use the Google strategy
passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClientID,
            clientSecret: keys.googleClientSecret,
            // Relative path with GoogleStrategy may cause https become http
            // because Heroku use proxy and GoogleStrategy does not trust it.
            callbackURL: '/auth/google/callback',
            proxy: true // make GoogleStrategy trust proxy
        },
        async (accessToken, refreshToken, profile, done) => {
            // console.log('accessToken', accessToken);
            // console.log('refreshToken', refreshToken);
            // console.log('profile', profile);

            // find the first match in user collection that id === profile.id
            // This is an async operation returns Promise
            const existingUser = await User.findOne({ googleId: profile.id });
            if (existingUser) {
                // already have a record with given profile.id

                // done(errorInfo, userRecord)
                done(null, existingUser);
            } else {
                // create an instance and save it to db
                // This is an async operation
                const user = await new User({ googleId: profile.id }).save();
                done(null, user);
            }
        }
    )
);
